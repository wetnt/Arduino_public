//===================================================================
#include <SoftwareSerial.h>
#include <Time.h>//时间日期库
#include <TinyGPS++.h>//GPS解析库
//===================================================================
static const int GPSBaud = 9600;
int gpsZone = +8;//时区
static float homeW = 39.9718170, homeJ = 116.3248100;
static float homeL = 0;
//===================================================================
//#define  gpsTR  Serial2
SoftwareSerial gpsTR(11, 10); //RX,TX
TinyGPSPlus gpsTY;
//===================================================================
void GPS_setup() {
  gpsTR.begin(GPSBaud);
  lgln(F("gps.Serial.start!"));
}
//===================================================================
static void GPS_Feed()
{
  //-------------------------------
  gpsTR.listen();
  while (gpsTR.available()) {
    char c = gpsTR.read();
    gpsTY.encode(c);
    //lgs.write(c);
  }
  //-------------------------------
}
//=========================================================================
//#########################################################################
//=========================================================================
typedef struct GpsInfo
{
  //----------------------------------------------------------------
  int tz = 8;//time_zone
  time_t tl = 0, tu = 0;//local_time,utc_time
  //----------------------------------------------------------------
  int dy, dm, dd, th, tm, ts; //year,month,day,hour,min,second
  double w, j, h, v, x; //lat,long,high,speed,fangxiang
  //----------------------------------------------------------------
  int n, r; //sat_number,sat_hdop
  bool k, p; //GPS_Location_flag
  //char p;//GPS_Location_type
  //----------------------------------------------------------------
};
typedef struct GpsInfoString
{
  //----------------------------------------------------------------
  char tl[15], tu[15]; //time_utc/local
  char d[12], t[10]; //YMD,HMS
  char ds[6], ts[6]; //MD,HM
  char w[14], j[14], h[8], v[8], x[8]; //WJHVF
  char p[2], k[2], n[4], r[4], z[4]; //KT;KK;SN;SR;HZ;
  //----------------------------------------------------------------
};
//=========================================================================
//#########################################################################
//=========================================================================
GpsInfo g;
GpsInfoString gs;
//=========================================================================
//#########################################################################
//=========================================================================
void GpsValueSet() {
  //-------------------------------------------------------------------------
  g.tz = gpsZone;
  //-------------------------------------------------------------------------
  setTime(
    gpsTY.time.hour(), gpsTY.time.minute(), gpsTY.time.second(),
    gpsTY.date.day(), gpsTY.date.month(), gpsTY.date.year()
  );
  //setTime(10, 30, 38, 1, 10, 2015);
  g.tu = now();
  setTime(
    gpsTY.time.hour() + g.tz, gpsTY.time.minute(), gpsTY.time.second(),
    gpsTY.date.day(), gpsTY.date.month(), gpsTY.date.year()
  );
  //setTime(10, 30, 38, 1, 10, 2015);
  g.tl = now();
  //-------------------------------------------------------------------------
  g.dy = year(); g.dm = month();  g.dd = day();
  g.th = hour(); g.tm = minute(); g.ts = second();
  //-------------------------------------------------------------------------
  g.k = gpsTY.gpsDataGood;
  g.p = gpsTY.date.isValid();//.sentencesWithFix();//gpsTY.sentenceHasFix - 46;
  //-------------------------------------------------------------------------
  g.n = gpsTY.satellites.value();
  g.r = gpsTY.hdop.value();
  g.w = gpsTY.location.lat();
  g.j = gpsTY.location.lng();
  g.h = gpsTY.altitude.meters();
  g.x = gpsTY.course.deg();
  g.v = gpsTY.speed.kmph();
  //-------------------------------------------------------------------------
  if (0) {
    g.w = 39.977123456; g.j = 116.332; g.h = 50;
    g.x = 180; g.v = 80; g.n = 4; g.r = 100;
  }
  //-------------------------------------------------------------------------
}
static void GpsStringSet() {
  //-------------------------------------------------------------------------
  dtostrf(g.k, 1, 0, gs.k);
  dtostrf(g.p, 1, 0, gs.p);
  //gs.p = g.p;
  //gs.k = g.k; //dtostrf(g.p, 1, 0, gs.p);
  //-------------------------------------------------------------------------
  sprintf(gs.d, "%02d-%02d-%02d", g.dy, g.dm, g.dd);
  sprintf(gs.t, "%02d:%02d:%02d", g.th, g.tm, g.ts);
  sprintf(gs.ds, "%02d-%02d", g.dm, g.dd);
  sprintf(gs.ts, "%02d:%02d", g.th, g.tm);
  //-------------------------------------------------------------------------
  dtostrf((uint32_t)g.tu, 10, 0, gs.tu);
  dtostrf((uint32_t)g.tl, 10, 0, gs.tl);
  //-------------------------------------------------------------------------
  dtostrf(g.w, 3, 7, gs.w);  dtostrf(g.j, 3, 7, gs.j);
  dtostrf(g.h, 4, 0, gs.h);  dtostrf(g.v, 3, 1, gs.v);
  dtostrf(g.x, 3, 0, gs.x);
  dtostrf(g.n, 2, 0, gs.n);  dtostrf(g.r, 4, 0, gs.r);
  //-------------------------------------------------------------------------
}
//=========================================================================
//#########################################################################
//=========================================================================
void GpsToHome() {
  homeL = TinyGPSPlus::distanceBetween(g.w, g.j, homeW, homeJ) / 1000;
}
void GpsLineShow() {
  //--------------------------------------------------------
  lg(gs.d); lg(" "); lg(gs.t); lg(" ");
  lg(gs.w); lg(","); lg(gs.j); lg(","); lg(gs.h); lg(",");
  lg(gs.v); lg(","); lg(gs.x); lg(","); lg(gs.n); lg(",");
  lg(homeL); lgln("");
  //--------------------------------------------------------
}
//===============================================================
